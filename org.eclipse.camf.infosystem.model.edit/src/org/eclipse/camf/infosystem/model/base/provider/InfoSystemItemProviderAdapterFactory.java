/**
 */
package org.eclipse.camf.infosystem.model.base.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.camf.infosystem.model.base.util.InfoSystemAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InfoSystemItemProviderAdapterFactory extends InfoSystemAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfoSystemItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.MonitoringProbe} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MonitoringProbeItemProvider monitoringProbeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.MonitoringProbe}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMonitoringProbeAdapter()
  {
    if (monitoringProbeItemProvider == null)
    {
      monitoringProbeItemProvider = new MonitoringProbeItemProvider(this);
    }

    return monitoringProbeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.ResizingAction} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResizingActionItemProvider resizingActionItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.ResizingAction}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createResizingActionAdapter()
  {
    if (resizingActionItemProvider == null)
    {
      resizingActionItemProvider = new ResizingActionItemProvider(this);
    }

    return resizingActionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.SoftwareDependency} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SoftwareDependencyItemProvider softwareDependencyItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.SoftwareDependency}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSoftwareDependencyAdapter()
  {
    if (softwareDependencyItemProvider == null)
    {
      softwareDependencyItemProvider = new SoftwareDependencyItemProvider(this);
    }

    return softwareDependencyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.UserApplication} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UserApplicationItemProvider userApplicationItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.UserApplication}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createUserApplicationAdapter()
  {
    if (userApplicationItemProvider == null)
    {
      userApplicationItemProvider = new UserApplicationItemProvider(this);
    }

    return userApplicationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.KeyPair} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KeyPairItemProvider keyPairItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.KeyPair}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createKeyPairAdapter()
  {
    if (keyPairItemProvider == null)
    {
      keyPairItemProvider = new KeyPairItemProvider(this);
    }

    return keyPairItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.VirtualMachineImageFlavor} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VirtualMachineImageFlavorItemProvider virtualMachineImageFlavorItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.VirtualMachineImageFlavor}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirtualMachineImageFlavorAdapter()
  {
    if (virtualMachineImageFlavorItemProvider == null)
    {
      virtualMachineImageFlavorItemProvider = new VirtualMachineImageFlavorItemProvider(this);
    }

    return virtualMachineImageFlavorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.VirtualNetwork} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VirtualNetworkItemProvider virtualNetworkItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.VirtualNetwork}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirtualNetworkAdapter()
  {
    if (virtualNetworkItemProvider == null)
    {
      virtualNetworkItemProvider = new VirtualNetworkItemProvider(this);
    }

    return virtualNetworkItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.CloudProvider} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CloudProviderItemProvider cloudProviderItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.CloudProvider}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCloudProviderAdapter()
  {
    if (cloudProviderItemProvider == null)
    {
      cloudProviderItemProvider = new CloudProviderItemProvider(this);
    }

    return cloudProviderItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.VirtualMachineImage} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VirtualMachineImageItemProvider virtualMachineImageItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.VirtualMachineImage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirtualMachineImageAdapter()
  {
    if (virtualMachineImageItemProvider == null)
    {
      virtualMachineImageItemProvider = new VirtualMachineImageItemProvider(this);
    }

    return virtualMachineImageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Deployment} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentItemProvider deploymentItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Deployment}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeploymentAdapter()
  {
    if (deploymentItemProvider == null)
    {
      deploymentItemProvider = new DeploymentItemProvider(this);
    }

    return deploymentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Module} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModuleItemProvider moduleItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Module}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createModuleAdapter()
  {
    if (moduleItemProvider == null)
    {
      moduleItemProvider = new ModuleItemProvider(this);
    }

    return moduleItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.VirtualInstance} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VirtualInstanceItemProvider virtualInstanceItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.VirtualInstance}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirtualInstanceAdapter()
  {
    if (virtualInstanceItemProvider == null)
    {
      virtualInstanceItemProvider = new VirtualInstanceItemProvider(this);
    }

    return virtualInstanceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.SecurityGroup} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SecurityGroupItemProvider securityGroupItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.SecurityGroup}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSecurityGroupAdapter()
  {
    if (securityGroupItemProvider == null)
    {
      securityGroupItemProvider = new SecurityGroupItemProvider(this);
    }

    return securityGroupItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Root} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RootItemProvider rootItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Root}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRootAdapter()
  {
    if (rootItemProvider == null)
    {
      rootItemProvider = new RootItemProvider(this);
    }

    return rootItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Images} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImagesItemProvider imagesItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Images}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createImagesAdapter()
  {
    if (imagesItemProvider == null)
    {
      imagesItemProvider = new ImagesItemProvider(this);
    }

    return imagesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Networks} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NetworksItemProvider networksItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Networks}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNetworksAdapter()
  {
    if (networksItemProvider == null)
    {
      networksItemProvider = new NetworksItemProvider(this);
    }

    return networksItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Security} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SecurityItemProvider securityItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Security}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSecurityAdapter()
  {
    if (securityItemProvider == null)
    {
      securityItemProvider = new SecurityItemProvider(this);
    }

    return securityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Keys} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KeysItemProvider keysItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Keys}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createKeysAdapter()
  {
    if (keysItemProvider == null)
    {
      keysItemProvider = new KeysItemProvider(this);
    }

    return keysItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Groups} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GroupsItemProvider groupsItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Groups}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGroupsAdapter()
  {
    if (groupsItemProvider == null)
    {
      groupsItemProvider = new GroupsItemProvider(this);
    }

    return groupsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Flavors} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FlavorsItemProvider flavorsItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Flavors}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFlavorsAdapter()
  {
    if (flavorsItemProvider == null)
    {
      flavorsItemProvider = new FlavorsItemProvider(this);
    }

    return flavorsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.Monitoring} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MonitoringItemProvider monitoringItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.Monitoring}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMonitoringAdapter()
  {
    if (monitoringItemProvider == null)
    {
      monitoringItemProvider = new MonitoringItemProvider(this);
    }

    return monitoringItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.camf.infosystem.model.base.MonitoringService} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MonitoringServiceItemProvider monitoringServiceItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.camf.infosystem.model.base.MonitoringService}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMonitoringServiceAdapter()
  {
    if (monitoringServiceItemProvider == null)
    {
      monitoringServiceItemProvider = new MonitoringServiceItemProvider(this);
    }

    return monitoringServiceItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (monitoringProbeItemProvider != null) monitoringProbeItemProvider.dispose();
    if (resizingActionItemProvider != null) resizingActionItemProvider.dispose();
    if (softwareDependencyItemProvider != null) softwareDependencyItemProvider.dispose();
    if (userApplicationItemProvider != null) userApplicationItemProvider.dispose();
    if (keyPairItemProvider != null) keyPairItemProvider.dispose();
    if (virtualMachineImageFlavorItemProvider != null) virtualMachineImageFlavorItemProvider.dispose();
    if (virtualNetworkItemProvider != null) virtualNetworkItemProvider.dispose();
    if (cloudProviderItemProvider != null) cloudProviderItemProvider.dispose();
    if (virtualMachineImageItemProvider != null) virtualMachineImageItemProvider.dispose();
    if (deploymentItemProvider != null) deploymentItemProvider.dispose();
    if (moduleItemProvider != null) moduleItemProvider.dispose();
    if (virtualInstanceItemProvider != null) virtualInstanceItemProvider.dispose();
    if (securityGroupItemProvider != null) securityGroupItemProvider.dispose();
    if (rootItemProvider != null) rootItemProvider.dispose();
    if (imagesItemProvider != null) imagesItemProvider.dispose();
    if (networksItemProvider != null) networksItemProvider.dispose();
    if (securityItemProvider != null) securityItemProvider.dispose();
    if (keysItemProvider != null) keysItemProvider.dispose();
    if (groupsItemProvider != null) groupsItemProvider.dispose();
    if (flavorsItemProvider != null) flavorsItemProvider.dispose();
    if (monitoringItemProvider != null) monitoringItemProvider.dispose();
    if (monitoringServiceItemProvider != null) monitoringServiceItemProvider.dispose();
  }

}
